jobs:
  build_and_test:
    working_directory: ~/app
    docker:
      - image: circleci/elixir:1.10.2-node
        environment:
          MIX_ENV: test
      - image: circleci/postgres:12.2
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: my_app_test
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout
      - run:
          name: Install Hex
          command: mix local.hex --force
      - run:
          name: Install Rebar
          command: mix local.rebar --force
      - restore_cache:
          keys:
            - deps-test-v2-{{ .Branch }}-{{ checksum "mix.lock" }}
            - deps-test-v2-{{ .Branch }}
            - deps-test-v2
      - run:
          name: Install Mix's dependencies
          command: mix deps.get
      - save_cache:
          key: deps-test-v2-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: deps
      - restore_cache:
          keys:
            - build-test-v2-{{ .Branch }}
            - build-test-v2-
      - run:
          name: Compile Elixir's source files
          command: mix compile
      - save_cache:
          key: build-test-v2-{{ .Branch }}
          paths: _build
      - restore_cache:
          keys:
            - node-v2-{{ .Branch }}-{{ checksum "assets/package-lock.json" }}
            - node-v2-{{ .Branch }}
            - node-v2-
      - run:
          name: Install Node.js's modules
          command: cd assets && npm install
      - save_cache:
          key: node-v2-{{ .Branch }}-{{ checksum "assets/package-lock.json" }}
          paths:
            - assets/node_modules
      - run:
          name: Check that Elixir's source files are formatted
          command: mix format --check-formatted
      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run Elixir's tests
          command: mix test
      - store_test_results:
          path: _build/test/lib/my_app

  build_release:
    working_directory: ~/app
    docker:
      - image: circleci/elixir:1.10.2-node
        environment:
          MIX_ENV: prod
    steps:
      - checkout
      - run:
          name: Install Hex
          command: mix local.hex --force
      - run:
          name: Install Rebar
          command: mix local.rebar --force
      - restore_cache:
          keys:
            - deps-prod-v2-{{ .Branch }}-{{ checksum "mix.lock" }}
            - deps-prod-v2-{{ .Branch }}
            - deps-prod-v2
      - run:
          name: Install Mix's dependencies
          command: mix deps.get --only prod
      - save_cache:
          key: deps-prod-v2-{{ .Branch }}-{{ checksum "mix.lock" }}
          paths: deps
      - restore_cache:
          keys:
            - build-prod-v2-{{ .Branch }}
            - build-prod-v2-
      - run:
          name: Compile Elixir's source files
          command: mix compile
      - save_cache:
          key: build-prod-v2-{{ .Branch }}
          paths: _build
      - restore_cache:
          keys:
            - node-v2-{{ .Branch }}-{{ checksum "assets/package-lock.json" }}
            - node-v2-{{ checksum "assets/package-lock.json" }}
            - node-v2-
      - run:
          name: Install Node.js's modules
          command: cd assets && npm install
      - save_cache:
          key: node-v2-{{ .Branch }}-{{ checksum "assets/package-lock.json" }}
          paths: assets/node_modules
      - restore_cache:
          keys:
            - static-prod-v2
      - run:
          name: Compile assets
          command: npm run deploy --prefix ./assets
      - run:
          name: Digests and compresses static files
          command: mix phx.digest
      - save_cache:
          key: static-prod-v2
          paths: priv/static
      - run:
          name: Assemble a self-contained release
          command: mix release
      - run:
          name: Compress a self-contained release
          command: cd _build/prod/rel/ && tar -czvf my_app.tar.gz my_app/
      - persist_to_workspace:
          root: ~/app
          paths: _build/prod/rel/my_app.tar.gz

workflows:
  version: 2
  build_test_release:
    jobs:
      - build_and_test
      - build_release
